import { useState, useCallback } from 'react';
import { Alert } from 'react-native';
import { getUserDonations, deleteDonation, updateDonation } from '../../../services/donationService';
import { Donation } from '../types';
import { EditDonationFormData } from '../types';

/**
 * Hook para gerenciar as doa√ß√µes do usu√°rio
 */
export const useDonations = () => {
  const [donations, setDonations] = useState<Donation[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedDonation, setSelectedDonation] = useState<Donation | null>(null);
  const [isDetailsModalVisible, setIsDetailsModalVisible] = useState(false);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [isEditModalVisible, setIsEditModalVisible] = useState(false);

  // Carregar as doa√ß√µes do usu√°rio
  const loadDonations = useCallback(async () => {
    setIsLoading(true);
    try {
      const userDonations = await getUserDonations();
      
      if (userDonations && userDonations.length > 0) {
        console.log('‚úÖ [MYDONATIONS] Doa√ß√µes carregadas:', userDonations.length);
        setDonations(userDonations);
      } else {
        console.log('‚ÑπÔ∏è [MYDONATIONS] Nenhuma doa√ß√£o encontrada');
        setDonations([]);
      }
    } catch (error) {
      console.error('‚ùå [MYDONATIONS] Erro ao carregar doa√ß√µes:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel carregar suas doa√ß√µes. Tente novamente.');
      setDonations([]);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Abrir modal de detalhes da doa√ß√£o
  const handleViewDetails = useCallback((donation: Donation) => {
    setSelectedDonation(donation);
    setIsDetailsModalVisible(true);
  }, []);

  // Fechar modal de detalhes da doa√ß√£o
  const handleCloseDetails = useCallback(() => {
    setIsDetailsModalVisible(false);
    setTimeout(() => setSelectedDonation(null), 300); // Limpar somente ap√≥s a anima√ß√£o de fechamento
  }, []);

  // Abrir modal de edi√ß√£o de doa√ß√£o
  const handleEditDonation = useCallback((donation: Donation) => {
    setSelectedDonation(donation);
    setIsDetailsModalVisible(false);
    
    // Pequeno delay para evitar problemas visuais com a transi√ß√£o de modais
    setTimeout(() => {
      setIsEditModalVisible(true);
    }, 300);
    
    console.log('üñäÔ∏è [MYDONATIONS] Editar doa√ß√£o:', donation.ID);
  }, []);
  
  // Fechar modal de edi√ß√£o
  const handleCloseEditModal = useCallback(() => {
    setIsEditModalVisible(false);
    setTimeout(() => setSelectedDonation(null), 300);
  }, []);
  
  // Salvar a edi√ß√£o da doa√ß√£o
  const handleSaveEdit = useCallback(async (formData: EditDonationFormData) => {
    setIsLoading(true);
    
    try {
      console.log('üñäÔ∏è [MYDONATIONS] Salvando edi√ß√£o da doa√ß√£o:', formData.id);
      
      // Chamar API para atualizar a doa√ß√£o
      await updateDonation(formData.id, {
        foodName: formData.foodName,
        expirationDate: formData.expirationDate,
        description: formData.description,
        district: formData.district,
        preferredPickupTime: formData.preferredPickupTime,
        termsAccepted: formData.termsAccepted,
        images: formData.images,
        imagesToDelete: formData.imagesToDelete
      });
      
      // Recarregar as doa√ß√µes ap√≥s a atualiza√ß√£o
      await loadDonations();
      
      Alert.alert('Sucesso', 'Doa√ß√£o atualizada com sucesso!');
    } catch (error) {
      console.error('‚ùå [MYDONATIONS] Erro ao atualizar doa√ß√£o:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel atualizar a doa√ß√£o. Tente novamente.');
    } finally {
      setIsLoading(false);
      setIsEditModalVisible(false);
      setSelectedDonation(null);
    }
  }, [loadDonations]);

  // Abrir modal de confirma√ß√£o de exclus√£o
  const handleDeleteConfirmation = useCallback((donation: Donation) => {
    setSelectedDonation(donation);
    setIsDetailsModalVisible(false);
    setTimeout(() => setIsDeleteModalVisible(true), 300);
  }, []);

  // Cancelar exclus√£o
  const handleCancelDelete = useCallback(() => {
    setIsDeleteModalVisible(false);
  }, []);

  // Confirmar e executar exclus√£o
  const handleConfirmDelete = useCallback(async () => {
    if (!selectedDonation) return;
    
    setIsDeleteModalVisible(false);
    setIsLoading(true);
    
    try {
      // Chamar a API para deletar a doa√ß√£o
      await deleteDonation(selectedDonation.ID);
      console.log('üóëÔ∏è [MYDONATIONS] Doa√ß√£o deletada:', selectedDonation.ID);
      
      // Atualizar a lista removendo o item deletado
      setDonations(prevDonations => 
        prevDonations.filter(item => item.ID !== selectedDonation.ID)
      );
      
      Alert.alert('Sucesso', 'Doa√ß√£o removida com sucesso.');
    } catch (error) {
      console.error('‚ùå [MYDONATIONS] Erro ao deletar doa√ß√£o:', error);
      Alert.alert('Erro', 'N√£o foi poss√≠vel remover a doa√ß√£o. Tente novamente.');
    } finally {
      setIsLoading(false);
      setSelectedDonation(null);
    }
  }, [selectedDonation]);

  return {
    donations,
    isLoading,
    selectedDonation,
    isDetailsModalVisible,
    isDeleteModalVisible,
    isEditModalVisible,
    loadDonations,
    handleViewDetails,
    handleCloseDetails,
    handleEditDonation,
    handleCloseEditModal,
    handleSaveEdit,
    handleDeleteConfirmation,
    handleCancelDelete,
    handleConfirmDelete
  };
}; 